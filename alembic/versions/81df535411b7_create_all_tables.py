"""Create all tables

Revision ID: 81df535411b7
Revises: 
Create Date: 2024-03-24 17:17:27.824744

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '81df535411b7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('cities')
    op.drop_table('users')
    op.drop_table('request_subjects')
    op.drop_table('lawyers')
    op.drop_table('question_categories')
    op.drop_table('requests')
    op.drop_table('provinces')
    op.drop_table('answers')
    op.drop_table('specialties')
    op.drop_table('questions')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('questions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('questions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lawyerId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('questionCategoryId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('isPrivate', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['lawyerId'], ['lawyers.id'], name='questions_lawyerId_fkey'),
    sa.ForeignKeyConstraint(['questionCategoryId'], ['question_categories.id'], name='questions_questionCategoryId_fkey'),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='questions_userId_fkey'),
    sa.PrimaryKeyConstraint('id', name='questions_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('specialties',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('specialties_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='specialties_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('answers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('questionId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lawyerId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['lawyerId'], ['lawyers.id'], name='answers_lawyerId_fkey'),
    sa.ForeignKeyConstraint(['questionId'], ['questions.id'], name='answers_questionId_fkey'),
    sa.PrimaryKeyConstraint('id', name='answers_pkey')
    )
    op.create_table('provinces',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('provinces_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='provinces_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('requests',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('lawyerId', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('requestType', postgresql.ENUM('STATEMENT', 'PETITION', 'BILL', 'COMPLAINT', name='requesttype'), autoincrement=False, nullable=False),
    sa.Column('requestSubjectId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('attachment1', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('attachment2', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('attachment3', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['lawyerId'], ['lawyers.id'], name='requests_lawyerId_fkey'),
    sa.ForeignKeyConstraint(['requestSubjectId'], ['request_subjects.id'], name='requests_requestSubjectId_fkey'),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='requests_userId_fkey'),
    sa.PrimaryKeyConstraint('id', name='requests_pkey')
    )
    op.create_table('question_categories',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='question_categories_pkey')
    )
    op.create_table('lawyers',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('userId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('gender', postgresql.ENUM('MALE', 'FEMALE', name='gender'), autoincrement=False, nullable=False),
    sa.Column('age', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('maritalStatus', postgresql.ENUM('SINGLE', 'MARRIED', name='maritalstatus'), autoincrement=False, nullable=False),
    sa.Column('provinceId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('cityId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('eduDegree', postgresql.ENUM('BACHELOR', 'MASTERS', 'PHD', 'POSTDOCTORAL', name='educationdegree'), autoincrement=False, nullable=False),
    sa.Column('studyField', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('profilePic', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('licenseCode', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('position', postgresql.ENUM('LAWYER', 'EXPERT', 'LAWYER_EXPERT', 'INTERN', name='lawyerposition'), autoincrement=False, nullable=False),
    sa.Column('experienceYears', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('biography', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('officePhoneNumber', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('officeAddress', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('specialtyId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['cityId'], ['cities.id'], name='lawyers_cityId_fkey'),
    sa.ForeignKeyConstraint(['provinceId'], ['provinces.id'], name='lawyers_provinceId_fkey'),
    sa.ForeignKeyConstraint(['specialtyId'], ['specialties.id'], name='lawyers_specialtyId_fkey'),
    sa.ForeignKeyConstraint(['userId'], ['users.id'], name='lawyers_userId_fkey'),
    sa.PrimaryKeyConstraint('id', name='lawyers_pkey'),
    sa.UniqueConstraint('licenseCode', name='lawyers_licenseCode_key')
    )
    op.create_table('request_subjects',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('requestType', postgresql.ENUM('STATEMENT', 'PETITION', 'BILL', 'COMPLAINT', name='requesttype'), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='request_subjects_pkey')
    )
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('isAdmin', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('isLawyer', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('fullname', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('phoneNumber', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('hashedPassword', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', name='users_email_key'),
    sa.UniqueConstraint('phoneNumber', name='users_phoneNumber_key'),
    sa.UniqueConstraint('username', name='users_username_key')
    )
    op.create_table('cities',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provinceId', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('createdAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updatedAt', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['provinceId'], ['provinces.id'], name='cities_provinceId_fkey'),
    sa.PrimaryKeyConstraint('id', name='cities_pkey')
    )
    # ### end Alembic commands ###
